package clienthellod

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/gaukas/clienthellod/internal/utils"
)

var testInput = []byte{
	0x16, 0x03, 0x01, 0x02, 0x02, 0x01, 0x00, 0x01,
	0xfe, 0x03, 0x03, 0x2f, 0xed, 0xad, 0xdd, 0xcf,
	0x68, 0x75, 0xf0, 0xae, 0xe7, 0xc8, 0x1f, 0x90,
	0x84, 0x5b, 0x7a, 0x18, 0x72, 0xaa, 0x2e, 0x93,
	0x16, 0xcd, 0xd7, 0x1f, 0xab, 0x33, 0x46, 0xcc,
	0x89, 0x62, 0x9a, 0x20, 0xe2, 0x33, 0x63, 0x08,
	0x94, 0x50, 0xdc, 0x66, 0x83, 0x96, 0x86, 0xae,
	0x90, 0x5b, 0xd1, 0x04, 0x1e, 0x10, 0xfa, 0xf6,
	0xb2, 0x1b, 0xd2, 0xbb, 0x66, 0xf8, 0x0c, 0x0d,
	0x5f, 0xaa, 0xfc, 0x90, 0x00, 0x20, 0x5a, 0x5a,
	0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0xc0, 0x2b,
	0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30, 0xcc, 0xa9,
	0xcc, 0xa8, 0xc0, 0x13, 0xc0, 0x14, 0x00, 0x9c,
	0x00, 0x9d, 0x00, 0x2f, 0x00, 0x35, 0x01, 0x00,
	0x01, 0x95, 0x4a, 0x4a, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 0x08,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31,
	0x00, 0x2b, 0x00, 0x07, 0x06, 0x7a, 0x7a, 0x03,
	0x04, 0x03, 0x03, 0x00, 0x33, 0x00, 0x2b, 0x00,
	0x29, 0x4a, 0x4a, 0x00, 0x01, 0x00, 0x00, 0x1d,
	0x00, 0x20, 0x68, 0x4b, 0x26, 0xcc, 0x07, 0x03,
	0x26, 0xf6, 0x76, 0x06, 0xbd, 0x98, 0x9d, 0xee,
	0x5b, 0xcd, 0xa2, 0x96, 0xc3, 0x27, 0x3c, 0xef,
	0x0f, 0x6e, 0xda, 0x6a, 0x6b, 0x43, 0xf7, 0x30,
	0xf5, 0x45, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08,
	0x4a, 0x4a, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
	0x00, 0x17, 0x00, 0x00, 0x44, 0x69, 0x00, 0x05,
	0x00, 0x03, 0x02, 0x68, 0x32, 0x00, 0x0b, 0x00,
	0x02, 0x01, 0x00, 0xff, 0x01, 0x00, 0x01, 0x00,
	0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x1d, 0x00, 0x1b, 0x00, 0x00, 0x18, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x6c,
	0x73, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2e, 0x69, 0x6f, 0x00,
	0x23, 0x00, 0xc0, 0x92, 0xe4, 0x08, 0x87, 0x29,
	0x71, 0x37, 0xef, 0x5d, 0x7f, 0x8f, 0xb1, 0x24,
	0x2b, 0x06, 0xf7, 0xae, 0x21, 0x7d, 0x4d, 0x8f,
	0x59, 0x49, 0x8a, 0x86, 0xe3, 0xdb, 0xa2, 0x2f,
	0xd7, 0xc0, 0x90, 0x8d, 0x77, 0x71, 0x07, 0xe6,
	0xa7, 0x8b, 0xb5, 0xfb, 0x96, 0xcc, 0x6d, 0x00,
	0xad, 0x46, 0xaa, 0xcf, 0x67, 0x26, 0x89, 0x56,
	0xdd, 0x46, 0x12, 0x89, 0x2f, 0xe0, 0xa2, 0x43,
	0xac, 0x8e, 0xc0, 0xd1, 0x2f, 0xbf, 0xf7, 0x5f,
	0x42, 0x02, 0x00, 0xea, 0xa1, 0xa5, 0xe7, 0x22,
	0xfb, 0xc1, 0x1c, 0x56, 0x07, 0xf8, 0x37, 0x52,
	0x23, 0x33, 0x1e, 0x8b, 0x72, 0xa7, 0xd9, 0x8b,
	0x34, 0xbb, 0xef, 0x21, 0x08, 0x37, 0x1e, 0x23,
	0x73, 0x37, 0x53, 0x92, 0x80, 0xdb, 0x95, 0x5f,
	0x7c, 0x13, 0x17, 0xd4, 0xb0, 0x3c, 0xdc, 0x3e,
	0x29, 0x6b, 0xcc, 0xff, 0xce, 0x07, 0x9e, 0x35,
	0x27, 0x47, 0xe1, 0x00, 0xf3, 0x93, 0xc2, 0x54,
	0x7b, 0x1d, 0xf3, 0x22, 0x30, 0x6a, 0xa4, 0x91,
	0xfb, 0x4c, 0x93, 0x58, 0x9c, 0x8d, 0x95, 0xb3,
	0xac, 0x5e, 0x3a, 0xc8, 0x35, 0x80, 0x0b, 0xc3,
	0x27, 0x4c, 0x40, 0x74, 0x9a, 0x6d, 0x39, 0x66,
	0x70, 0xdb, 0xc7, 0xb3, 0x9b, 0x95, 0x5f, 0xd1,
	0xc3, 0x6a, 0x0e, 0xc9, 0x28, 0x3f, 0x0f, 0x83,
	0x5d, 0x5e, 0x57, 0xc6, 0x7e, 0x25, 0xd2, 0xe4,
	0x20, 0xbc, 0xac, 0x00, 0x0d, 0x00, 0x12, 0x00,
	0x10, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05,
	0x03, 0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06,
	0x01, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x1b,
	0x00, 0x03, 0x02, 0x00, 0x02, 0x9a, 0x9a, 0x00,
	0x01, 0x00, 0x00, 0x15, 0x00, 0x01, 0x00,
}

func TestReadClientHello(t *testing.T) {
	ch, err := ReadClientHello(bytes.NewReader(testInput))
	if err != nil {
		t.Fatal(err)
	}

	err = ch.ParseClientHello()
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("cert_compression_algs: %v", ch.lengthPrefixedCertCompressAlgos)
	t.Logf("supported_versions: %v", utils.Uint16ToUint8(ch.SupportedVersions))
	t.Logf("cipher_suites: %v", utils.Uint16ToUint8(ch.CipherSuites))
	t.Logf("record_size_limit: %v", ch.RecordSizeLimit)

	var clientHello string
	for _, b := range ch.raw {
		clientHello += fmt.Sprintf("%02x", b)
	}
	t.Logf("clienthello: %s", clientHello)

	t.Logf("pt_fmts: %v", ch.lengthPrefixedEcPointFormats)
	t.Logf("psk_key_exchange_modes: %v", ch.PSKKeyExchangeModes)
	t.Logf("extensions_norm: %v", utils.Uint16ToUint8(ch.ExtensionsNormalized))
	t.Logf("tls_version: %d", ch.TLSRecordVersion)
	t.Logf("ch_version: %d", ch.TLSHandshakeVersion)
	t.Logf("compression_methods: %v", ch.CompressionMethods)
	t.Logf("sni: %s", ch.ServerName)
	t.Logf("curves: %v", utils.Uint16ToUint8(ch.lengthPrefixedSupportedGroups))
	t.Logf("sig_algs: %v", utils.Uint16ToUint8(ch.lengthPrefixedSignatureAlgos))
	t.Logf("key_share: %v", utils.Uint16ToUint8(ch.keyshareGroupsWithLengths))
	t.Logf("extensions: %v", utils.Uint16ToUint8(ch.Extensions))
	t.Logf("alpn: %v", ch.alpnWithLengths)

	t.Logf("norm_id: %s", ch.FingerprintID(true))
	t.Logf("id: %s", ch.FingerprintID(false))
}
