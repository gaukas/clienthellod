package clienthellod

import (
	"bytes"
	"testing"

	"golang.org/x/exp/slices"
)

var headerTestMap = map[string]struct {
	data  []byte
	truth *QUICHeader
}{
	"quic_IETF_DATA_GoogleChrome": {
		data:  quicIETFData_GoogleChrome,
		truth: quicHeaderTruth_GoogleChrome,
	},
}

func TestDecodeQUICHeaderAndFrames(t *testing.T) {
	for name, test := range headerTestMap {
		t.Run(name, func(t *testing.T) {
			testcaseDecodeQUICHeaderAndFrames(t, test.data, test.truth)
		})
	}
}

func testcaseDecodeQUICHeaderAndFrames(t *testing.T, data []byte, truth *QUICHeader) {
	qHdr, err := DecodeQUICHeaderAndFrames(data)
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(qHdr.Version, truth.Version) {
		t.Errorf("qHdr.Version = %x, want %x", qHdr.Version, truth.Version)
	}

	if qHdr.DCIDLength != truth.DCIDLength {
		t.Errorf("qHdr.DCIDLength = %d, want %d", qHdr.DCIDLength, truth.DCIDLength)
	}

	if qHdr.SCIDLength != truth.SCIDLength {
		t.Errorf("qHdr.SCIDLength = %d, want %d", qHdr.SCIDLength, truth.SCIDLength)
	}

	if !bytes.Equal(qHdr.PacketNumber, truth.PacketNumber) {
		t.Errorf("qHdr.PacketNumber = %x, want %x", qHdr.PacketNumber, truth.PacketNumber)
	}

	if !slices.Equal(qHdr.FrameIDs, truth.FrameIDs) {
		t.Errorf("qHdr.FrameIDs = %v, want %v", qHdr.FrameIDs, truth.FrameIDs)
	}

	if qHdr.TokenLength != truth.TokenLength {
		t.Errorf("qHdr.TokenLength = %d, want %d", qHdr.TokenLength, truth.TokenLength)
	}
}

var (
	quicIETFData_GoogleChrome = []byte{
		0xce, 0x00, 0x00, 0x00, 0x01, 0x08, 0x44, 0x0d,
		0xf3, 0x3e, 0x5d, 0x46, 0x62, 0xbe, 0x00, 0x00,
		0x44, 0xbc, 0xe6, 0x75, 0x87, 0xfa, 0x77, 0xe8,
		0x47, 0x80, 0x70, 0x0b, 0x44, 0xa9, 0x7d, 0x75,
		0x48, 0x91, 0x7f, 0x5e, 0xb7, 0xde, 0x29, 0x88,
		0xaf, 0x22, 0x7d, 0x09, 0x0a, 0x34, 0x99, 0xa8,
		0x16, 0x26, 0x5f, 0xb1, 0x1c, 0x23, 0xe5, 0xc8,
		0xc3, 0xef, 0x4c, 0x37, 0x66, 0x72, 0x02, 0x12,
		0xfe, 0x1b, 0xb8, 0x8d, 0xeb, 0x46, 0x5d, 0x35,
		0xd9, 0x48, 0x8c, 0x33, 0x4a, 0x04, 0xbc, 0x1c,
		0xf3, 0xa0, 0xc3, 0x6a, 0xd6, 0xb7, 0x43, 0x94,
		0x70, 0x42, 0x0b, 0x50, 0x0f, 0x53, 0xfb, 0x27,
		0xf6, 0xd4, 0x4d, 0x5b, 0x85, 0xad, 0x9c, 0x53,
		0x45, 0xd2, 0x4b, 0xc8, 0xb4, 0x94, 0xe7, 0xfc,
		0x41, 0xfe, 0xbc, 0x1e, 0x2a, 0x20, 0x47, 0x3a,
		0xfd, 0xf3, 0x2b, 0x40, 0xa4, 0x2f, 0xdd, 0x71,
		0x96, 0xd7, 0xfc, 0xb7, 0xa3, 0x42, 0xf0, 0x02,
		0x70, 0x39, 0xf9, 0x57, 0x7f, 0x6f, 0x7c, 0x44,
		0x78, 0x2e, 0xb5, 0x3e, 0xb4, 0xe2, 0x0c, 0x8f,
		0x89, 0xed, 0xd7, 0x2f, 0x1e, 0x64, 0x70, 0x3a,
		0xaf, 0xcf, 0x24, 0xa5, 0x58, 0x8c, 0x64, 0x13,
		0x8c, 0x6f, 0x7c, 0x72, 0xee, 0x8d, 0x62, 0x09,
		0x27, 0x06, 0xcd, 0x54, 0xcd, 0x6d, 0xc2, 0x21,
		0x93, 0x67, 0x6d, 0x45, 0x67, 0x4f, 0x0f, 0x4d,
		0x4c, 0xfb, 0x10, 0xad, 0x39, 0x08, 0xe4, 0xe6,
		0x2d, 0x71, 0x76, 0x4b, 0x79, 0xed, 0x52, 0x1b,
		0xa3, 0xda, 0x54, 0x43, 0x9f, 0x63, 0x65, 0xbb,
		0x72, 0xe1, 0x99, 0x1d, 0x08, 0x52, 0x3f, 0x34,
		0x0b, 0x6c, 0x75, 0x90, 0xd5, 0x05, 0x29, 0x40,
		0xda, 0xfe, 0x6d, 0xde, 0x74, 0xed, 0x7d, 0xaa,
		0xb0, 0x11, 0x8e, 0x45, 0x24, 0x6e, 0xb6, 0x38,
		0x28, 0x07, 0xc6, 0xf9, 0x4e, 0xa8, 0x92, 0xe5,
		0xab, 0x0e, 0xff, 0x58, 0xfa, 0x87, 0x2b, 0x43,
		0x72, 0x13, 0x4f, 0x15, 0xae, 0x68, 0x59, 0xfb,
		0x2c, 0xb3, 0xa5, 0x10, 0x95, 0x1e, 0x3f, 0x80,
		0x40, 0xc1, 0xbc, 0x13, 0x7c, 0xc7, 0x03, 0x56,
		0xad, 0x20, 0x4e, 0x35, 0x64, 0x20, 0x13, 0x1e,
		0x14, 0x84, 0x26, 0x0b, 0xaa, 0x35, 0x93, 0x21,
		0x23, 0x8a, 0x3e, 0xc4, 0x4a, 0x0f, 0x44, 0x75,
		0x5a, 0x6e, 0x9d, 0x19, 0xb2, 0x10, 0x8a, 0xcf,
		0x52, 0x99, 0x6f, 0x25, 0xa9, 0x7e, 0xa9, 0x12,
		0x33, 0xfd, 0x5d, 0xeb, 0xb0, 0xb1, 0xf7, 0x70,
		0x72, 0x1e, 0xf6, 0x0b, 0x7d, 0x1d, 0xda, 0x64,
		0x4a, 0x63, 0xb5, 0xec, 0xf6, 0x54, 0x8c, 0x43,
		0x8f, 0xa0, 0x2f, 0x26, 0x2c, 0x56, 0xc5, 0x24,
		0x70, 0x85, 0x28, 0x18, 0x7e, 0x9e, 0xdb, 0x63,
		0x66, 0x66, 0xf2, 0x23, 0x10, 0x77, 0xc2, 0xc8,
		0x77, 0xb2, 0x1b, 0x98, 0x5f, 0x5a, 0x91, 0x12,
		0x4d, 0xfd, 0xb6, 0x67, 0xf9, 0x91, 0x68, 0xb4,
		0x18, 0xca, 0x8a, 0x97, 0x1f, 0x1e, 0xf4, 0x5a,
		0xb8, 0x52, 0x52, 0x04, 0xa7, 0x72, 0x11, 0xdf,
		0x68, 0xd3, 0xe6, 0x55, 0x2b, 0x12, 0x49, 0x04,
		0x87, 0xca, 0x52, 0x4b, 0x2a, 0xad, 0x7b, 0x19,
		0x37, 0x3e, 0x19, 0xfa, 0xe4, 0x9d, 0x4b, 0xe2,
		0x3c, 0xe9, 0x84, 0x11, 0x9f, 0x7a, 0xc8, 0x11,
		0x07, 0xf4, 0xfc, 0x24, 0x1a, 0x17, 0x8e, 0x10,
		0x04, 0x24, 0xfa, 0x24, 0x05, 0x7e, 0x90, 0x29,
		0x8e, 0xfa, 0x4c, 0x4b, 0x0f, 0x9f, 0xac, 0xf7,
		0xfe, 0x1b, 0x90, 0x8b, 0xbb, 0x69, 0x38, 0x92,
		0x88, 0x9f, 0x0e, 0xa2, 0xab, 0xed, 0x7f, 0xcf,
		0xa7, 0x67, 0xf3, 0x76, 0x9c, 0x2d, 0xbc, 0xf3,
		0x11, 0xe1, 0x9a, 0xa3, 0xff, 0xa4, 0xb9, 0xe7,
		0xb5, 0x50, 0x41, 0x80, 0x80, 0xa3, 0xa8, 0xdb,
		0x04, 0x81, 0xce, 0x4f, 0xbb, 0x98, 0x64, 0xaa,
		0xf5, 0x42, 0x32, 0x6a, 0x13, 0xb8, 0x4b, 0x04,
		0x10, 0x45, 0x4e, 0x41, 0x31, 0x56, 0xf3, 0x47,
		0x67, 0x5a, 0xb9, 0x73, 0xf1, 0x87, 0x0b, 0x58,
		0x23, 0xdd, 0x89, 0x6e, 0x4b, 0x82, 0x54, 0xe0,
		0x1d, 0x9f, 0x1b, 0x73, 0xf6, 0x22, 0x5d, 0x4f,
		0x02, 0x88, 0xf3, 0xfb, 0xb3, 0x63, 0xc8, 0xf8,
		0xd1, 0x1e, 0x81, 0x96, 0xf6, 0x21, 0xc5, 0x17,
		0x0f, 0xb1, 0x47, 0x4f, 0xb7, 0x2f, 0x7a, 0xd0,
		0x20, 0xae, 0xe6, 0x3f, 0x38, 0x28, 0x61, 0x6b,
		0xcc, 0x02, 0x2b, 0x28, 0x96, 0xa1, 0x96, 0x3e,
		0x86, 0xa6, 0x50, 0x72, 0xa5, 0x6e, 0x2f, 0x59,
		0xa7, 0x4a, 0x53, 0xcd, 0x99, 0x64, 0x6e, 0x7c,
		0x1e, 0x7b, 0xbd, 0x9b, 0xdd, 0xc1, 0xb7, 0x3b,
		0xba, 0x0a, 0xa3, 0x38, 0xbd, 0xf0, 0xfb, 0x9b,
		0x61, 0x0a, 0xa2, 0x07, 0xfc, 0x2f, 0x50, 0x0b,
		0x10, 0x4f, 0x52, 0x60, 0x2f, 0x69, 0xa3, 0xf9,
		0x42, 0x90, 0xc8, 0xb3, 0xb3, 0x7a, 0xa6, 0x6f,
		0x47, 0xbf, 0xaf, 0x42, 0x00, 0xf8, 0xba, 0xe2,
		0x4e, 0x5c, 0x9b, 0xd6, 0x26, 0x14, 0x5e, 0xb9,
		0x93, 0xaa, 0x76, 0x9e, 0xed, 0x20, 0xd1, 0xa3,
		0x6a, 0x27, 0xad, 0xde, 0x58, 0x3b, 0xbe, 0x15,
		0x97, 0xe5, 0xcd, 0xde, 0xc8, 0x5e, 0x7a, 0x3c,
		0xf0, 0x0c, 0x08, 0x52, 0x78, 0x0e, 0xcd, 0x7f,
		0x46, 0x68, 0x87, 0xb4, 0x61, 0x6b, 0xd1, 0xea,
		0x4e, 0xd6, 0xcb, 0x4d, 0x7b, 0x31, 0x98, 0x29,
		0x28, 0x67, 0x3e, 0xcd, 0x7a, 0x84, 0x94, 0xf8,
		0xa0, 0xd8, 0x23, 0x28, 0xb6, 0x93, 0x6b, 0x97,
		0x2f, 0x52, 0xac, 0x47, 0xb2, 0x24, 0x14, 0xaa,
		0x49, 0x9a, 0xd1, 0x0f, 0x35, 0x1f, 0xd1, 0xbf,
		0xf2, 0xc2, 0x84, 0xa1, 0x7c, 0x97, 0xed, 0x84,
		0x77, 0x31, 0xc3, 0x34, 0x5b, 0x0c, 0x75, 0x11,
		0xcc, 0x97, 0xb8, 0x35, 0x95, 0xda, 0x9d, 0x89,
		0xc3, 0x46, 0xbf, 0xbb, 0x16, 0xce, 0xe8, 0x8d,
		0x9e, 0xb5, 0x90, 0xc7, 0x3c, 0xd4, 0x80, 0x2f,
		0x32, 0xb2, 0x62, 0x4c, 0x4f, 0xab, 0xd7, 0xa0,
		0x9b, 0x84, 0x74, 0xbf, 0xd6, 0x17, 0x20, 0x5b,
		0x19, 0x41, 0xe7, 0x12, 0x24, 0x72, 0x88, 0xb7,
		0xb6, 0x15, 0x8b, 0x84, 0xcf, 0xf2, 0x5e, 0x83,
		0xae, 0x69, 0x59, 0xe4, 0x4c, 0xc6, 0x56, 0xb8,
		0x4a, 0x90, 0xf6, 0x8e, 0xb7, 0x00, 0xb6, 0x38,
		0x36, 0x0c, 0xec, 0x7f, 0x19, 0x0a, 0xcb, 0x63,
		0xae, 0xe9, 0xa1, 0x7b, 0x72, 0x9d, 0x7c, 0xe5,
		0x02, 0x8b, 0x85, 0x9a, 0xc8, 0xed, 0x5e, 0x5b,
		0xb3, 0x87, 0xda, 0x57, 0x76, 0x3a, 0xb0, 0xba,
		0x6a, 0x2f, 0x09, 0xc6, 0x91, 0x5a, 0x9d, 0x58,
		0xc5, 0xf0, 0xb9, 0xb3, 0xec, 0x19, 0xc2, 0x88,
		0xc1, 0x18, 0xff, 0x17, 0x40, 0xf3, 0x5f, 0x9a,
		0xc6, 0x94, 0xe1, 0xb6, 0x95, 0x49, 0x01, 0x2e,
		0x52, 0xef, 0xca, 0x94, 0x11, 0x50, 0x5b, 0x76,
		0x3b, 0x92, 0xa9, 0x38, 0xf5, 0x18, 0x96, 0x39,
		0xb3, 0xb4, 0x47, 0x13, 0xc0, 0x37, 0x11, 0x3c,
		0xe5, 0x56, 0xfb, 0x1a, 0x82, 0x6e, 0xa4, 0x84,
		0x6d, 0xe2, 0x03, 0xed, 0x6f, 0x80, 0x99, 0x44,
		0x64, 0x7b, 0x88, 0x27, 0x4a, 0xf4, 0xd4, 0xd8,
		0x59, 0x58, 0xe4, 0x00, 0x17, 0x48, 0xcb, 0xcf,
		0x8b, 0xbe, 0x17, 0xf9, 0x5b, 0xa6, 0xe3, 0x0f,
		0xc4, 0x8b, 0x25, 0x03, 0x3c, 0x8e, 0xa1, 0xbf,
		0x26, 0xbf, 0x6b, 0xfd, 0x1b, 0x84, 0x48, 0x19,
		0xd8, 0xd2, 0x6a, 0xec, 0x9b, 0x35, 0x5f, 0x3d,
		0x3e, 0xc9, 0x62, 0x71, 0xe7, 0xa9, 0x2a, 0x30,
		0x90, 0x52, 0x94, 0xe2, 0xef, 0x0e, 0xbe, 0x14,
		0x51, 0xb0, 0x4b, 0x04, 0x59, 0x16, 0x78, 0xb8,
		0x12, 0x02, 0x46, 0xf5, 0x92, 0xdf, 0x3f, 0xc5,
		0x73, 0xd6, 0x50, 0xa1, 0x5e, 0x24, 0x01, 0x85,
		0xa8, 0xea, 0xbf, 0x0c, 0x1b, 0x35, 0xc0, 0xf5,
		0x14, 0xe5, 0xef, 0xfb, 0xe9, 0x65, 0x63, 0x9b,
		0x8b, 0x5b, 0xb8, 0x82, 0x84, 0xd2, 0x1a, 0x3f,
		0x92, 0xa2, 0xcc, 0x45, 0x7c, 0xa2, 0x38, 0xbc,
		0x30, 0xdd, 0xe9, 0x18, 0xf4, 0xd2, 0x35, 0x34,
		0xbc, 0xce, 0x6c, 0x7c, 0xf7, 0xed, 0xe2, 0x14,
		0x3d, 0x76, 0x31, 0x95, 0x2e, 0x2c, 0x76, 0xba,
		0x13, 0x02, 0x61, 0x88, 0x24, 0x9f, 0xee, 0x91,
		0xbb, 0x7c, 0xf6, 0xaa, 0xf0, 0x20, 0x06, 0x5e,
		0xf7, 0x43, 0xdf, 0xa5, 0x64, 0xda, 0x80, 0x15,
		0xfa, 0xe5, 0x70, 0xe6, 0x08, 0x8a, 0x73, 0xf5,
		0xd0, 0x67, 0x04, 0x90, 0x47, 0x79, 0x2b, 0xbf,
		0xff, 0x45, 0x66, 0x27, 0x0b, 0xb7, 0x07, 0xe7,
		0x96, 0xfc, 0x26, 0xbf, 0xfc, 0x0b, 0x90, 0xaa,
		0xd5, 0x5e, 0xea, 0xeb, 0xe7, 0x4c, 0xfb, 0xe6,
		0xc9, 0x50, 0x0b, 0x1f, 0x73, 0x53, 0x44, 0x1f,
		0xe3, 0xd9, 0xea, 0x44, 0x4c, 0x18, 0xcb, 0x69,
		0x3f, 0x12, 0x0d, 0xb5, 0xe0, 0x1a, 0xb4, 0x33,
		0xf7, 0xfb, 0x13, 0x15, 0x19, 0xea, 0x50, 0x27,
		0xb4, 0xc8, 0xd6, 0x1e, 0x99, 0xa0, 0x5b, 0xd5,
		0x29, 0x43, 0x4b, 0x00, 0x5d, 0x3a, 0x41, 0x3a,
		0x0f, 0x96, 0x14, 0xe0, 0x52, 0xbe, 0x33, 0x9e,
		0x47, 0x37, 0x3c, 0x6d, 0x56, 0x49, 0xa1, 0x8a,
		0x5d, 0x15, 0x2d, 0xba, 0x33, 0x1d, 0x4e, 0x2b,
		0x9c, 0x6c, 0x3b, 0xa7, 0xaa, 0xc4, 0x32, 0x1b,
		0x32, 0xc9, 0x73, 0xe4, 0x8c, 0x9d,
	}

	quicHeaderTruth_GoogleChrome = &QUICHeader{
		Version:      []byte{0x00, 0x00, 0x00, 0x01},
		DCIDLength:   8,
		SCIDLength:   0,
		PacketNumber: []byte{0x01},
		FrameIDs: []byte{
			0x00, 0x01, 0x06, // sorted unique IDs
		},
		TokenLength: 0,
	}
)
